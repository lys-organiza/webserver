#!/usr/bin/env php
<?php

defined('YII_DEBUG') or define('YII_DEBUG', true);

defined('YII_ENV') or define('YII_ENV', 'dev');

defined('ROOT_PATH') or define('ROOT_PATH',__DIR__);

defined('RUN_TIME_PATH') or define('RUN_TIME_PATH',ROOT_PATH.'/runtime');

require ROOT_PATH . '/../vendor/autoload.php';

require ROOT_PATH . '/../vendor/yiisoft/yii2/Yii.php';

if(!is_dir(RUN_TIME_PATH)){
    mkdir(RUN_TIME_PATH,0755,true);
}

if(!is_writable(RUN_TIME_PATH)){
    print_ln('the path '.RUN_TIME_PATH.' is not writable.');
    exit();
}

$command = $argv[1]??'';

switch ($command){
    case 'start':
        run(($argv[2]??'') == '-d');
        break;
    case 'stop':
        stop();
        break;
    case 'restart':
        stop() && run(true);
        break;
    default:
        print_error("use `php {$argv[0]} start|start -d|stop|restart`");
        break;
}

/**
 * run
 * @param bool $daemonize
 * @throws \yii\base\InvalidConfigException
 */
function run(bool $daemonize=false)
{
    \Swoole\Runtime::enableCoroutine(SWOOLE_HOOK_ALL);
    \yii2swoole\webserver\Config::getInstance([
        'port'=>9502,
        'settings' => [
            'pid_file' => RUN_TIME_PATH.'/httpServer.pid',
            'log_file' => RUN_TIME_PATH.'/httpServer.log',
            'document_root' => __DIR__.'/web',
            'enable_static_handler' => $daemonize?false:true,
            'daemonize' => $daemonize,
        ],
    ]);

    $httpServer = new \yii2swoole\webserver\HttpServer(getWebApp());

    $autoReload = new \yii2swoole\webserver\helper\AutoReload($httpServer->getServer(),ROOT_PATH);

    $httpServer->getServer()->addProcess($autoReload->hotReloadProcess);

    $httpServer->start();
}

/**
 * stop
 * @return bool
 */
function stop()
{
    if(!empty($pid = file_get_contents(RUN_TIME_PATH.'/httpServer.pid'))){
        if(!\Swoole\Process::kill($pid,0)){
            print_error("server is not running.");
            return false;
        }else{
            if (!\Swoole\Process::kill($pid, 9)) {
                print_error("stop server fail:pid({$pid}) not exist.");
                return false;
            }else{
                print_success("stop server success.");
                return true;
            }
        }
    }else{
        print_error("stop server fail:pid file does not exist");
        return false;
    }
}

/**
 * getWebApp
 * @return \yii\web\Application
 * @throws \yii\base\InvalidConfigException
 */
function getWebApp()
{
    Yii::setAlias('@yii2swoole/test',__DIR__);
    $yiiConfig = require ROOT_PATH . '/config/main.php';
    return new \yii2swoole\webserver\Application($yiiConfig);
}
